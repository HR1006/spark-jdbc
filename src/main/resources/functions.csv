!	! expr - Logical not.
%	expr1 % expr2 - Returns the remainder after expr1/expr2.
&	expr1 & expr2 - Returns the result of bitwise AND of expr1 and expr2.
*	expr1 * expr2 - Returns expr1*expr2.
+	expr1 + expr2 - Returns expr1+expr2.
-	expr1 - expr2 - Returns expr1-expr2.
/	expr1 / expr2 - Returns expr1/expr2. It always performs floating point division.
<	expr1 < expr2 - Returns true if expr1 is less than expr2.
<=	expr1 <= expr2 - Returns true if expr1 is less than or equal to expr2.
<=>	expr1 <=> expr2 - Returns same result as the EQUAL(=) operator for non-null operands, but returns true if both are null, false if one of the them is null.
=	expr1 = expr2 - Returns true if expr1 equals expr2, or false otherwise.
==	expr1 == expr2 - Returns true if expr1 equals expr2, or false otherwise.
>	expr1 > expr2 - Returns true if expr1 is greater than expr2.
>=	expr1 >= expr2 - Returns true if expr1 is greater than or equal to expr2.
^	expr1 ^ expr2 - Returns the result of bitwise exclusive OR of expr1 and expr2.
abs	abs(expr) - Returns the absolute value of the numeric value.
acos	acos(expr) - Returns the inverse cosine (a.k.a. arc cosine) of expr, as if computed by java.lang.Math.acos.
add_months	add_months(start_date, num_months) - Returns the date that is num_months after start_date.
aggregate	aggregate(expr, start, merge, finish) - Applies a binary operator to an initial state and all elements in the array, and reduces this to a single state. The final state is converted into the final result by applying a finish function.
and	expr1 and expr2 - Logical AND.
approx_count_distinct	approx_count_distinct(expr[, relativeSD]) - Returns the estimated cardinality by HyperLogLog++. relativeSD defines the maximum estimation error allowed.
approx_percentile	approx_percentile(col, percentage [, accuracy]) - Returns the approximate percentile value of numeric column col at the given percentage. The value of percentage must be between 0.0 and 1.0. The accuracy parameter (default: 10000) is a positive numeric literal which controls approximation accuracy at the cost of memory. Higher value of accuracy yields better accuracy, 1.0/accuracy is the relative error of the approximation. When percentage is an array, each value of the percentage array must be between 0.0 and 1.0. In this case, returns the approximate percentile array of column col at the given percentage array.
array	array(expr, ...) - Returns an array with the given elements.
array_contains	array_contains(array, value) - Returns true if the array contains the value.
array_distinct	array_distinct(array) - Removes duplicate values from the array.
array_except	array_except(array1, array2) - Returns an array of the elements in array1 but not in array2, without duplicates.
array_intersect	array_intersect(array1, array2) - Returns an array of the elements in the intersection of array1 and array2, without duplicates.
array_join	array_join(array, delimiter[, nullReplacement]) - Concatenates the elements of the given array using the delimiter and an optional string to replace nulls. If no value is set for nullReplacement, any null value is filtered.
array_max	array_max(array) - Returns the maximum value in the array. NULL elements are skipped.
array_min	array_min(array) - Returns the minimum value in the array. NULL elements are skipped.
array_position	array_position(array, element) - Returns the (1-based) index of the first element of the array as long.
array_remove	array_remove(array, element) - Remove all elements that equal to element from array.
array_repeat	array_repeat(element, count) - Returns the array containing element count times.
array_sort	array_sort(array) - Sorts the input array in ascending order. The elements of the input array must be orderable. Null elements will be placed at the end of the returned array.
array_union	array_union(array1, array2) - Returns an array of the elements in the union of array1 and array2, without duplicates.
arrays_overlap	arrays_overlap(a1, a2) - Returns true if a1 contains at least a non-null element present also in a2. If the arrays have no common element and they are both non-empty and either of them contains a null element null is returned, false otherwise.
arrays_zip	arrays_zip(a1, a2, ...) - Returns a merged array of structs in which the N-th struct contains all N-th values of input arrays.
ascii	ascii(str) - Returns the numeric value of the first character of str.
asin	asin(expr) - Returns the inverse sine (a.k.a. arc sine) the arc sin of expr, as if computed by java.lang.Math.asin.
assert_true	assert_true(expr) - Throws an exception if expr is not true.
atan	atan(expr) - Returns the inverse tangent (a.k.a. arc tangent) of expr, as if computed by java.lang.Math.atan
atan2	atan2(exprY, exprX) - Returns the angle in radians between the positive x-axis of a plane and the point given by the coordinates (exprX, exprY), as if computed by java.lang.Math.atan2.
avg	avg(expr) - Returns the mean calculated from values of a group.
base64	base64(bin) - Converts the argument from a binary bin to a base 64 string.
bigint	bigint(expr) - Casts the value expr to the target data type bigint.
bin	bin(expr) - Returns the string representation of the long value expr represented in binary.
binary	binary(expr) - Casts the value expr to the target data type binary.
bit_length	bit_length(expr) - Returns the bit length of string data or number of bits of binary data.
boolean	boolean(expr) - Casts the value expr to the target data type boolean.
bround	bround(expr, d) - Returns expr rounded to d decimal places using HALF_EVEN rounding mode.
cardinality	cardinality(expr) - Returns the size of an array or a map. The function returns -1 if its input is null and spark.sql.legacy.sizeOfNull is set to true. If spark.sql.legacy.sizeOfNull is set to false, the function returns null for null input. By default, the spark.sql.legacy.sizeOfNull parameter is set to true.
cast	cast(expr AS type) - Casts the value expr to the target data type type.
cbrt	cbrt(expr) - Returns the cube root of expr.
ceil	ceil(expr) - Returns the smallest integer not smaller than expr.
ceiling	ceiling(expr) - Returns the smallest integer not smaller than expr.
char	char(expr) - Returns the ASCII character having the binary equivalent to expr. If n is larger than 256 the result is equivalent to chr(n % 256)
char_length	char_length(expr) - Returns the character length of string data or number of bytes of binary data. The length of string data includes the trailing spaces. The length of binary data includes binary zeros.
character_length	character_length(expr) - Returns the character length of string data or number of bytes of binary data. The length of string data includes the trailing spaces. The length of binary data includes binary zeros.
chr	chr(expr) - Returns the ASCII character having the binary equivalent to expr. If n is larger than 256 the result is equivalent to chr(n % 256)
coalesce	coalesce(expr1, expr2, ...) - Returns the first non-null argument if exists. Otherwise, null.
collect_list	collect_list(expr) - Collects and returns a list of non-unique elements.
collect_set	collect_set(expr) - Collects and returns a set of unique elements.
concat	concat(col1, col2, ..., colN) - Returns the concatenation of col1, col2, ..., colN.
concat_ws	concat_ws(sep, [str | array(str)]+) - Returns the concatenation of the strings separated by sep.
conv	conv(num, from_base, to_base) - Convert num from from_base to to_base.
corr	corr(expr1, expr2) - Returns Pearson coefficient of correlation between a set of number pairs.
cos	cos(expr) - Returns the cosine of expr, as if computed by java.lang.Math.cos.
cosh	cosh(expr) - Returns the hyperbolic cosine of expr, as if computed by java.lang.Math.cosh.
cot	cot(expr) - Returns the cotangent of expr, as if computed by 1/java.lang.Math.cot.
count	count(*) - Returns the total number of retrieved rows, including rows containing null.
count_min_sketch	count_min_sketch(col, eps, confidence, seed) - Returns a count-min sketch of a column with the given esp, confidence and seed. The result is an array of bytes, which can be deserialized to a CountMinSketch before usage. Count-min sketch is a probabilistic data structure used for cardinality estimation using sub-linear space.
covar_pop	covar_pop(expr1, expr2) - Returns the population covariance of a set of number pairs.
covar_samp	covar_samp(expr1, expr2) - Returns the sample covariance of a set of number pairs.
crc32	crc32(expr) - Returns a cyclic redundancy check value of the expr as a bigint.
cube	cube([col1[, col2 ..]]) - create a multi-dimensional cube using the specified columns so that we can run aggregation on them.
cume_dist	cume_dist() - Computes the position of a value relative to all values in the partition.
current_database	current_database() - Returns the current database.
current_date	current_date() - Returns the current date at the start of query evaluation.
current_timestamp	current_timestamp() - Returns the current timestamp at the start of query evaluation.
date	date(expr) - Casts the value expr to the target data type date.
date_add	date_add(start_date, num_days) - Returns the date that is num_days after start_date.
date_format	date_format(timestamp, fmt) - Converts timestamp to a value of string in the format specified by the date format fmt.
date_sub	date_sub(start_date, num_days) - Returns the date that is num_days before start_date.
date_trunc	date_trunc(fmt, ts) - Returns timestamp ts truncated to the unit specified by the format model fmt. fmt should be one of ["YEAR", "YYYY", "YY", "MON", "MONTH", "MM", "DAY", "DD", "HOUR", "MINUTE", "SECOND", "WEEK", "QUARTER"]
datediff	datediff(endDate, startDate) - Returns the number of days from startDate to endDate.
day	day(date) - Returns the day of month of the date/timestamp.
dayofmonth	dayofmonth(date) - Returns the day of month of the date/timestamp.
dayofweek	dayofweek(date) - Returns the day of the week for date/timestamp (1 = Sunday, 2 = Monday, ..., 7 = Saturday).
dayofyear	dayofyear(date) - Returns the day of year of the date/timestamp.
decimal	decimal(expr) - Casts the value expr to the target data type decimal.
decode	decode(bin, charset) - Decodes the first argument using the second argument character set.
degrees	degrees(expr) - Converts radians to degrees.
dense_rank	dense_rank() - Computes the rank of a value in a group of values. The result is one plus the previously assigned rank value. Unlike the function rank, dense_rank will not produce gaps in the ranking sequence.
double	double(expr) - Casts the value expr to the target data type double.
e	e() - Returns Euler's number, e.
element_at	element_at(array, index) - Returns element of array at given (1-based) index. If index < 0, accesses elements from the last to the first. Returns NULL if the index exceeds the length of the array.
elt	elt(n, input1, input2, ...) - Returns the n-th input, e.g., returns input2 when n is 2.
encode	encode(str, charset) - Encodes the first argument using the second argument character set.
exists	exists(expr, pred) - Tests whether a predicate holds for one or more elements in the array.
exp	exp(expr) - Returns e to the power of expr.
explode	explode(expr) - Separates the elements of array expr into multiple rows, or the elements of map expr into multiple rows and columns.
explode_outer	explode_outer(expr) - Separates the elements of array expr into multiple rows, or the elements of map expr into multiple rows and columns.
expm1	expm1(expr) - Returns exp(expr) - 1.
factorial	factorial(expr) - Returns the factorial of expr. expr is [0..20]. Otherwise, null.
filter	filter(expr, func) - Filters the input array using the given predicate.
find_in_set	find_in_set(str, str_array) - Returns the index (1-based) of the given string (str) in the comma-delimited list (str_array). Returns 0, if the string was not found or if the given string (str) contains a comma.
first	first(expr[, isIgnoreNull]) - Returns the first value of expr for a group of rows. If isIgnoreNull is true, returns only non-null values.
first_value	first_value(expr[, isIgnoreNull]) - Returns the first value of expr for a group of rows. If isIgnoreNull is true, returns only non-null values.
flatten	flatten(arrayOfArrays) - Transforms an array of arrays into a single array.
float	float(expr) - Casts the value expr to the target data type float.
floor	floor(expr) - Returns the largest integer not greater than expr.
format_number	format_number(expr1, expr2) - Formats the number expr1 like '#,###,###.##', rounded to expr2 decimal places. If expr2 is 0, the result has no decimal point or fractional part. expr2 also accept a user specified format. This is supposed to function like MySQL's FORMAT.
format_string	format_string(strfmt, obj, ...) - Returns a formatted string from printf-style format strings.
from_json	from_json(jsonStr, schema[, options]) - Returns a struct value with the given jsonStr and schema.
from_unixtime	from_unixtime(unix_time, format) - Returns unix_time in the specified format.
from_utc_timestamp	from_utc_timestamp(timestamp, timezone) - Given a timestamp like '2017-07-14 02:40:00.0', interprets it as a time in UTC, and renders that time as a timestamp in the given time zone. For example, 'GMT+1' would yield '2017-07-14 03:40:00.0'.
get_json_object	get_json_object(json_txt, path) - Extracts a json object from path.
greatest	greatest(expr, ...) - Returns the greatest value of all parameters, skipping null values.
grouping	grouping(col) - indicates whether a specified column in a GROUP BY is aggregated or not, returns 1 for aggregated or 0 for not aggregated in the result set.",
grouping_id	grouping_id([col1[, col2 ..]]) - returns the level of grouping, equals to (grouping(c1) << (n-1)) + (grouping(c2) << (n-2)) + ... + grouping(cn)
hash	hash(expr1, expr2, ...) - Returns a hash value of the arguments.
hex	hex(expr) - Converts expr to hexadecimal.
hour	hour(timestamp) - Returns the hour component of the string/timestamp.
hypot	hypot(expr1, expr2) - Returns sqrt(expr12 + expr22).
if	if(expr1, expr2, expr3) - If expr1 evaluates to true, then returns expr2; otherwise returns expr3.
ifnull	ifnull(expr1, expr2) - Returns expr2 if expr1 is null, or expr1 otherwise.
in	expr1 in(expr2, expr3, ...) - Returns true if expr equals to any valN.
initcap	initcap(str) - Returns str with the first letter of each word in uppercase. All other letters are in lowercase. Words are delimited by white space.
inline	inline(expr) - Explodes an array of structs into a table.
inline_outer	inline_outer(expr) - Explodes an array of structs into a table.
input_file_block_length	input_file_block_length() - Returns the length of the block being read, or -1 if not available.
input_file_block_start	input_file_block_start() - Returns the start offset of the block being read, or -1 if not available.
input_file_name	input_file_name() - Returns the name of the file being read, or empty string if not available.
instr	instr(str, substr) - Returns the (1-based) index of the first occurrence of substr in str.
int	int(expr) - Casts the value expr to the target data type int.
isnan	isnan(expr) - Returns true if expr is NaN, or false otherwise.
isnotnull	isnotnull(expr) - Returns true if expr is not null, or false otherwise.
isnull	isnull(expr) - Returns true if expr is null, or false otherwise.
java_method	java_method(class, method[, arg1[, arg2 ..]]) - Calls a method with reflection.
json_tuple	json_tuple(jsonStr, p1, p2, ..., pn) - Returns a tuple like the function get_json_object, but it takes multiple names. All the input parameters and output column types are string.
kurtosis	kurtosis(expr) - Returns the kurtosis value calculated from values of a group.
lag	lag(input[, offset[, default]]) - Returns the value of input at the offsetth row before the current row in the window. The default value of offset is 1 and the default value of default is null. If the value of input at the offsetth row is null, null is returned. If there is no such offset row (e.g., when the offset is 1, the first row of the window does not have any previous row), default is returned.
last	last(expr[, isIgnoreNull]) - Returns the last value of expr for a group of rows. If isIgnoreNull is true, returns only non-null values.
last_day	last_day(date) - Returns the last day of the month which the date belongs to.
last_value	last_value(expr[, isIgnoreNull]) - Returns the last value of expr for a group of rows. If isIgnoreNull is true, returns only non-null values.
lcase	lcase(str) - Returns str with all characters changed to lowercase.
lead	lead(input[, offset[, default]]) - Returns the value of input at the offsetth row after the current row in the window. The default value of offset is 1 and the default value of default is null. If the value of input at the offsetth row is null, null is returned. If there is no such an offset row (e.g., when the offset is 1, the last row of the window does not have any subsequent row), default is returned.
least	least(expr, ...) - Returns the least value of all parameters, skipping null values.
left	left(str, len) - Returns the leftmost len(len can be string type) characters from the string str,if len is less or equal than 0 the result is an empty string.
length	length(expr) - Returns the character length of string data or number of bytes of binary data. The length of string data includes the trailing spaces. The length of binary data includes binary zeros.
levenshtein	levenshtein(str1, str2) - Returns the Levenshtein distance between the two given strings.
like	str like pattern - Returns true if str matches pattern, null if any arguments are null, false otherwise.
ln	ln(expr) - Returns the natural logarithm (base e) of expr.
locate	locate(substr, str[, pos]) - Returns the position of the first occurrence of substr in str after position pos. The given pos and return value are 1-based.
log	log(base, expr) - Returns the logarithm of expr with base.
log10	log10(expr) - Returns the logarithm of expr with base 10.
log1p	log1p(expr) - Returns log(1 + expr).
log2	log2(expr) - Returns the logarithm of expr with base 2.
lower	lower(str) - Returns str with all characters changed to lowercase.
lpad	lpad(str, len, pad) - Returns str, left-padded with pad to a length of len. If str is longer than len, the return value is shortened to len characters.
ltrim	ltrim(str) - Removes the leading space characters from str.
map	map(key0, value0, key1, value1, ...) - Creates a map with the given key/value pairs.
map_concat	map_concat(map, ...) - Returns the union of all the given maps
map_from_arrays	map_from_arrays(keys, values) - Creates a map with a pair of the given key/value arrays. All elements in keys should not be null
map_from_entries	map_from_entries(arrayOfEntries) - Returns a map created from the given array of entries.
map_keys	map_keys(map) - Returns an unordered array containing the keys of the map.
map_values	map_values(map) - Returns an unordered array containing the values of the map.
max	max(expr) - Returns the maximum value of expr.
md5	md5(expr) - Returns an MD5 128-bit checksum as a hex string of expr.
mean	mean(expr) - Returns the mean calculated from values of a group.
min	min(expr) - Returns the minimum value of expr.
minute	minute(timestamp) - Returns the minute component of the string/timestamp.
mod	expr1 mod expr2 - Returns the remainder after expr1/expr2.
monotonically_increasing_id	monotonically_increasing_id() - Returns monotonically increasing 64-bit integers. The generated ID is guaranteed to be monotonically increasing and unique, but not consecutive. The current implementation puts the partition ID in the upper 31 bits, and the lower 33 bits represent the record number within each partition. The assumption is that the data frame has less than 1 billion partitions, and each partition has less than 8 billion records. The function is non-deterministic because its result depends on partition IDs.
month	month(date) - Returns the month component of the date/timestamp.
months_between	months_between(timestamp1, timestamp2[, roundOff]) - If timestamp1 is later than timestamp2, then the result is positive. If timestamp1 and timestamp2 are on the same day of month, or both are the last day of month, time of day will be ignored. Otherwise, the difference is calculated based on 31 days per month, and rounded to 8 digits unless roundOff=false.
named_struct	named_struct(name1, val1, name2, val2, ...) - Creates a struct with the given field names and values.
nanvl	nanvl(expr1, expr2) - Returns expr1 if it's not NaN, or expr2 otherwise.
negative	negative(expr) - Returns the negated value of expr.
next_day	next_day(start_date, day_of_week) - Returns the first date which is later than start_date and named as indicated.
not	not expr - Logical not.
now	now() - Returns the current timestamp at the start of query evaluation.
ntile	ntile(n) - Divides the rows for each window partition into n buckets ranging from 1 to at most n.
nullif	nullif(expr1, expr2) - Returns null if expr1 equals to expr2, or expr1 otherwise.
nvl	nvl(expr1, expr2) - Returns expr2 if expr1 is null, or expr1 otherwise.
nvl2	nvl2(expr1, expr2, expr3) - Returns expr2 if expr1 is not null, or expr3 otherwise.
octet_length	octet_length(expr) - Returns the byte length of string data or number of bytes of binary data.
or	expr1 or expr2 - Logical OR.
parse_url	parse_url(url, partToExtract[, key]) - Extracts a part from a URL.
percent_rank	percent_rank() - Computes the percentage ranking of a value in a group of values.
percentile	percentile(col, percentage [, frequency]) - Returns the exact percentile value of numeric column col at the given percentage. The value of percentage must be between 0.0 and 1.0. The value of frequency should be positive integral
percentile_approx	percentile_approx(col, percentage [, accuracy]) - Returns the approximate percentile value of numeric column col at the given percentage. The value of percentage must be between 0.0 and 1.0. The accuracy parameter (default: 10000) is a positive numeric literal which controls approximation accuracy at the cost of memory. Higher value of accuracy yields better accuracy, 1.0/accuracy is the relative error of the approximation. When percentage is an array, each value of the percentage array must be between 0.0 and 1.0. In this case, returns the approximate percentile array of column col at the given percentage array.
pi	pi() - Returns pi.
pmod	pmod(expr1, expr2) - Returns the positive value of expr1 mod expr2.
posexplode	posexplode(expr) - Separates the elements of array expr into multiple rows with positions, or the elements of map expr into multiple rows and columns with positions.
posexplode_outer	posexplode_outer(expr) - Separates the elements of array expr into multiple rows with positions, or the elements of map expr into multiple rows and columns with positions.
position	position(substr, str[, pos]) - Returns the position of the first occurrence of substr in str after position pos. The given pos and return value are 1-based.
positive	positive(expr) - Returns the value of expr.
pow	pow(expr1, expr2) - Raises expr1 to the power of expr2.
power	power(expr1, expr2) - Raises expr1 to the power of expr2.
printf	printf(strfmt, obj, ...) - Returns a formatted string from printf-style format strings.
quarter	quarter(date) - Returns the quarter of the year for date, in the range 1 to 4.
radians	radians(expr) - Converts degrees to radians.
rand	rand([seed]) - Returns a random value with independent and identically distributed (i.i.d.) uniformly distributed values in [0, 1).
randn	randn([seed]) - Returns a random value with independent and identically distributed (i.i.d.) values drawn from the standard normal distribution.
rank	rank() - Computes the rank of a value in a group of values. The result is one plus the number of rows preceding or equal to the current row in the ordering of the partition. The values will produce gaps in the sequence.
reflect	reflect(class, method[, arg1[, arg2 ..]]) - Calls a method with reflection.
regexp_extract	regexp_extract(str, regexp[, idx]) - Extracts a group that matches regexp.
regexp_replace	regexp_replace(str, regexp, rep) - Replaces all substrings of str that match regexp with rep.
repeat	repeat(str, n) - Returns the string which repeats the given string value n times.
replace	replace(str, search[, replace]) - Replaces all occurrences of search with replace.
reverse	reverse(array) - Returns a reversed string or an array with reverse order of elements.
right	right(str, len) - Returns the rightmost len(len can be string type) characters from the string str,if len is less or equal than 0 the result is an empty string.
rint	rint(expr) - Returns the double value that is closest in value to the argument and is equal to a mathematical integer.
rlike	str rlike regexp - Returns true if str matches regexp, or false otherwise.
rollup	rollup([col1[, col2 ..]]) - create a multi-dimensional rollup using the specified columns so that we can run aggregation on them.
round	round(expr, d) - Returns expr rounded to d decimal places using HALF_UP rounding mode.
row_number	row_number() - Assigns a unique, sequential number to each row, starting with one, according to the ordering of rows within the window partition.
rpad	rpad(str, len, pad) - Returns str, right-padded with pad to a length of len. If str is longer than len, the return value is shortened to len characters.
rtrim	rtrim(str) - Removes the trailing space characters from str.
schema_of_json	schema_of_json(json[, options]) - Returns schema in the DDL format of JSON string.
second	second(timestamp) - Returns the second component of the string/timestamp.
sentences	sentences(str[, lang, country]) - Splits str into an array of array of words.
sequence	sequence(start, stop, step) - Generates an array of elements from start to stop (inclusive), incrementing by step. The type of the returned elements is the same as the type of argument expressions.
sha	sha(expr) - Returns a sha1 hash value as a hex string of the expr.
sha1	sha1(expr) - Returns a sha1 hash value as a hex string of the expr.
sha2	sha2(expr, bitLength) - Returns a checksum of SHA-2 family as a hex string of expr. SHA-224, SHA-256, SHA-384, and SHA-512 are supported. Bit length of 0 is equivalent to 256.
shiftleft	shiftleft(base, expr) - Bitwise left shift.
shiftright	shiftright(base, expr) - Bitwise (signed) right shift.
shiftrightunsigned	shiftrightunsigned(base, expr) - Bitwise unsigned right shift.
shuffle	shuffle(array) - Returns a random permutation of the given array.
sign	sign(expr) - Returns -1.0, 0.0 or 1.0 as expr is negative, 0 or positive.
signum	signum(expr) - Returns -1.0, 0.0 or 1.0 as expr is negative, 0 or positive.
sin	sin(expr) - Returns the sine of expr, as if computed by java.lang.Math.sin.
sinh	sinh(expr) - Returns hyperbolic sine of expr, as if computed by java.lang.Math.sinh.
size	size(expr) - Returns the size of an array or a map. The function returns -1 if its input is null and spark.sql.legacy.sizeOfNull is set to true. If spark.sql.legacy.sizeOfNull is set to false, the function returns null for null input. By default, the spark.sql.legacy.sizeOfNull parameter is set to true.
skewness	skewness(expr) - Returns the skewness value calculated from values of a group.
slice	slice(x, start, length) - Subsets array x starting from index start (or starting from the end if start is negative) with the specified length.
smallint	smallint(expr) - Casts the value expr to the target data type smallint.
sort_array	sort_array(array[, ascendingOrder]) - Sorts the input array in ascending or descending order according to the natural ordering of the array elements. Null elements will be placed at the beginning of the returned array in ascending order or at the end of the returned array in descending order.
soundex	soundex(str) - Returns Soundex code of the string.
space	space(n) - Returns a string consisting of n spaces.
spark_partition_id	spark_partition_id() - Returns the current partition id.
split	split(str, regex) - Splits str around occurrences that match regex.
sqrt	sqrt(expr) - Returns the square root of expr.
stack	stack(n, expr1, ..., exprk) - Separates expr1, ..., exprk into n rows.
std	std(expr) - Returns the sample standard deviation calculated from values of a group.
stddev	stddev(expr) - Returns the sample standard deviation calculated from values of a group.
stddev_pop	stddev_pop(expr) - Returns the population standard deviation calculated from values of a group.
stddev_samp	stddev_samp(expr) - Returns the sample standard deviation calculated from values of a group.
str_to_map	str_to_map(text[, pairDelim[, keyValueDelim]]) - Creates a map after splitting the text into key/value pairs using delimiters. Default delimiters are ',' for pairDelim and ':' for keyValueDelim.
string	string(expr) - Casts the value expr to the target data type string.
struct	struct(col1, col2, col3, ...) - Creates a struct with the given field values.
substr	substr(str, pos[, len]) - Returns the substring of str that starts at pos and is of length len, or the slice of byte array that starts at pos and is of length len.
substring	substring(str, pos[, len]) - Returns the substring of str that starts at pos and is of length len, or the slice of byte array that starts at pos and is of length len.
substring_index	substring_index(str, delim, count) - Returns the substring from str before count occurrences of the delimiter delim. If count is positive, everything to the left of the final delimiter (counting from the left) is returned. If count is negative, everything to the right of the final delimiter (counting from the right) is returned. The function substring_index performs a case-sensitive match when searching for delim.
sum	sum(expr) - Returns the sum calculated from values of a group.
tan	tan(expr) - Returns the tangent of expr, as if computed by java.lang.Math.tan.
tanh	tanh(expr) - Returns the hyperbolic tangent of expr, as if computed by java.lang.Math.tanh.
timestamp	timestamp(expr) - Casts the value expr to the target data type timestamp.
tinyint	tinyint(expr) - Casts the value expr to the target data type tinyint.
to_date	to_date(date_str[, fmt]) - Parses the date_str expression with the fmt expression to a date. Returns null with invalid input. By default, it follows casting rules to a date if the fmt is omitted.
to_json	to_json(expr[, options]) - Returns a JSON string with a given struct value
to_timestamp	to_timestamp(timestamp[, fmt]) - Parses the timestamp expression with the fmt expression to a timestamp. Returns null with invalid input. By default, it follows casting rules to a timestamp if the fmt is omitted.
to_unix_timestamp	to_unix_timestamp(expr[, pattern]) - Returns the UNIX timestamp of the given time.
to_utc_timestamp	to_utc_timestamp(timestamp, timezone) - Given a timestamp like '2017-07-14 02:40:00.0', interprets it as a time in the given time zone, and renders that time as a timestamp in UTC. For example, 'GMT+1' would yield '2017-07-14 01:40:00.0'.
transform	transform(expr, func) - Transforms elements in an array using the function.
translate	translate(input, from, to) - Translates the input string by replacing the characters present in the from string with the corresponding characters in the to string.
trim	trim(str) - Removes the leading and trailing space characters from str.
trunc	trunc(date, fmt) - Returns date with the time portion of the day truncated to the unit specified by the format model fmt. fmt should be one of ["year", "yyyy", "yy", "mon", "month", "mm"]
ucase	ucase(str) - Returns str with all characters changed to uppercase.
unbase64	unbase64(str) - Converts the argument from a base 64 string str to a binary.
unhex	unhex(expr) - Converts hexadecimal expr to binary.
unix_timestamp	unix_timestamp([expr[, pattern]]) - Returns the UNIX timestamp of current or specified time.
upper	upper(str) - Returns str with all characters changed to uppercase.
uuid	uuid() - Returns an universally unique identifier (UUID) string. The value is returned as a canonical UUID 36-character string.
var_pop	var_pop(expr) - Returns the population variance calculated from values of a group.
var_samp	var_samp(expr) - Returns the sample variance calculated from values of a group.
variance	variance(expr) - Returns the sample variance calculated from values of a group.
weekday	weekday(date) - Returns the day of the week for date/timestamp (0 = Monday, 1 = Tuesday, ..., 6 = Sunday).
weekofyear	weekofyear(date) - Returns the week of the year of the given date. A week is considered to start on a Monday and week 1 is the first week with >3 days.
when	CASE WHEN expr1 THEN expr2 [WHEN expr3 THEN expr4]* [ELSE expr5] END - When expr1 = true, returns expr2; else when expr3 = true, returns expr4; else returns expr5.
xpath	xpath(xml, xpath) - Returns a string array of values within the nodes of xml that match the XPath expression.
xpath_boolean	xpath_boolean(xml, xpath) - Returns true if the XPath expression evaluates to true, or if a matching node is found.
xpath_double	xpath_double(xml, xpath) - Returns a double value, the value zero if no match is found, or NaN if a match is found but the value is non-numeric.
xpath_float	xpath_float(xml, xpath) - Returns a float value, the value zero if no match is found, or NaN if a match is found but the value is non-numeric.
xpath_int	xpath_int(xml, xpath) - Returns an integer value, or the value zero if no match is found, or a match is found but the value is non-numeric.
xpath_long	xpath_long(xml, xpath) - Returns a long integer value, or the value zero if no match is found, or a match is found but the value is non-numeric.
xpath_number	xpath_number(xml, xpath) - Returns a double value, the value zero if no match is found, or NaN if a match is found but the value is non-numeric.
xpath_short	xpath_short(xml, xpath) - Returns a short integer value, or the value zero if no match is found, or a match is found but the value is non-numeric.
xpath_string	xpath_string(xml, xpath) - Returns the text contents of the first xml node that matches the XPath expression.
year	year(date) - Returns the year component of the date/timestamp.
zip_with	zip_with(left, right, func) - Merges the two given arrays, element-wise, into a single array using function. If one array is shorter, nulls are appended at the end to match the length of the longer array, before applying function.
|	expr1 | expr2 - Returns the result of bitwise OR of expr1 and expr2.
~	~ expr - Returns the result of bitwise NOT of expr.